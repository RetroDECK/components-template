name: "Sync with Upstream and Create PR"

on:
    workflow_dispatch:
    workflow_call:

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Retrieve full history to allow merging

      - name: Generate a token for Rekku
        if: ${{ github.repository == 'RetroDECK/RetroDECK' }}
        id: generate-rekku-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.REKKU_APP_ID }}
          private-key: ${{ secrets.REKKU_PRIVATE_KEY }}
          repositories: "RetroDECK,Cooker"
          owner: "RetroDECK"

      - name: Configuring Git
        run: |
          git config --global protocol.file.allow always
          git config --global user.name "Rekku"
          git config --global user.email "rekku@retrodeck.net"

      - name: Set default values for UPSTREAM_REPO and TARGET_BRANCH if not set
        run: |
          # Use the current repository name if UPSTREAM_REPO is not set
          : "${UPSTREAM_REPO:=${{ github.event.repository.name }}}"
          : "${TARGET_BRANCH:=master}"

          # Format the repository name for flathub, ensure no trailing spaces
          UPSTREAM_REPO="https://github.com/flathub/${UPSTREAM_REPO}"

          echo "UPSTREAM_REPO=${UPSTREAM_REPO}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${TARGET_BRANCH}" >> $GITHUB_ENV
          
      - name: Sync from Upstream Repository
        env:
          BRANCH_NAME: "feat/update-from-upstream"
        run: |
          echo "Syncing from upstream repository ${{ env.UPSTREAM_REPO }} on branch ${{ env.TARGET_BRANCH }}"
      
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
      
          git fetch origin
      
          # Switches or creates update branch
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            git checkout "$BRANCH_NAME"
          else
            git checkout -b "$BRANCH_NAME"
          fi
      
          # Fetch changes from the upstream repository without merging
          git fetch "${{ env.UPSTREAM_REPO }}" "${{ env.TARGET_BRANCH }}"

          git diff
      
          # Check if there are any changes to commit
          if git diff --exit-code "origin/${{ env.TARGET_BRANCH }}"; then
            echo "No changes detected from upstream. Exiting without creating PR."
            echo "SKIP_PR=true" >> $GITHUB_ENV
          else
            git add -A
            git commit -m "Updating ${{ github.event.repository.name }} with upstream changes"
            echo "SKIP_PR=false" >> $GITHUB_ENV
          fi
      
      - name: Push changes to new branch
        if: success() && env.SKIP_PR == 'false'
        run: |
          git push origin "${{ env.BRANCH_NAME }}"
      
      - name: Create Pull Request
        if: success() && env.SKIP_PR == 'false'
        uses: peter-evans/create-pull-request@v7.0.5
        with:
          token: ${{ steps.generate-rekku-token.outputs.token || secrets.GITHUB_TOKEN }}
          commit-message: "Sync with upstream changes from ${{ env.UPSTREAM_REPO }}"
          branch: ${{ env.BRANCH_NAME }}
          title: "Sync with upstream ${{ env.UPSTREAM_REPO }}"
          body: |
            This PR merges the latest changes from the upstream repository:
            - **Repository**: ${{ env.UPSTREAM_REPO }}
            - **Branch**: ${{ env.TARGET_BRANCH }}
      
            ## Conflict Resolution Instructions
            If there are conflicts in this PR, you can resolve them locally by following these steps:
      
            1. **Fetch the remote branch**:
                ```bash
                git fetch origin ${{ env.BRANCH_NAME }}
                ```
      
            2. **Checkout the branch**:
                ```bash
                git checkout ${{ env.BRANCH_NAME }}
                ```
      
            3. **Merge the upstream branch manually**:
                ```bash
                git fetch https://github.com/flathub/${{ env.UPSTREAM_REPO }} ${{ env.TARGET_BRANCH }}
                git merge FETCH_HEAD
                ```
      
            4. **Resolve any conflicts**:
                Open each conflicted file and manually resolve the conflicts. Then mark each file as resolved:
                ```bash
                git add <file-with-conflicts>
                ```
      
            5. **Complete the merge**:
                ```bash
                git commit
                ```
      
            6. **Push the resolved branch**:
                ```bash
                git push origin ${{ env.BRANCH_NAME }}
                ```
          base: ${{ env.TARGET_BRANCH }}
        
